id: nrsc5_rx_nrsc5_rx
label: nrsc5_rx
category: '[nrsc5_rx]'
flags: [python, cpp]

#  Make one 'parameters' list entry for every parameter you want settable from the GUI.
#     Keys include:
#     * id (makes the value accessible as keyname, e.g. in the make entry)
#     * label (label shown in the GUI)
#     * dtype (e.g. int, float, complex, byte, short, xxx_vector, ...)
#     * default
parameters:
- id: program
  label: Audio Program
  dtype: int
  default: 0

#  Make one 'inputs' list entry per input and one 'outputs' list entry per output.
#  Keys include:
#      * label (an identifier for the GUI)
#      * domain (optional - stream or message. Default is stream)
#      * dtype (e.g. int, float, complex, byte, short, xxx_vector, ...)
#      * vlen (optional - data stream vector length. Default is 1)
#      * optional (optional - set to 1 for optional inputs. Default is 0)
inputs:
- label: in
  domain: stream
  dtype: short
  vlen: 2

outputs:
- label: Lout
  domain: stream
  dtype: float

- label: Rout
  domain: stream
  dtype: float

templates:
  imports: import nrsc5_rx
  make: nrsc5_rx.nrsc5_rx(${program})
  callbacks:
  - set_program(${program})

cpp_templates:
  includes: ['#include <nrsc5_rx/nrsc5_rx.h>']
  declarations: 'nrsc5_rx::nrsc5_rx::sptr ${id};'
  make: 'this->${id} = nrsc5_rx::nrsc5_rx::make(${program}, false);'
  callbacks:
  - set_program(${program})
  translations:
    'True': 'true'
    'False': 'false'

documentation: |-
  This block is not intended for normal use.

  This block assumes that the input is complex short (output of "Complex To IShort"
  with "Vector Output" turned on) at exactly 744187.5 samples/sec. Anything else will
  prevent nrsc5 from syncing.

  Output is 44100hz audio.

  This block supports both Python and C++ output

#  'file_format' specifies the version of the GRC yml format used in the file
#  and should usually not be changed.
file_format: 1
